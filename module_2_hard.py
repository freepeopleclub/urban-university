# Задание "Слишком древний шифр":
# В первом поле камни с числом менялись постоянно (от 3 до 20) случайным образом, а второе было всегда пустым.
# Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки было кратно(делилось без остатка) сумме их значений.
#
# Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20) программа выдавала нужный пароль result, для одного введённого числа.
result = [] # создаём пустую матрицу result
# случайным образом выбираем значение числа на первом камне
import random
n = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ,15, 16, 17, 18, 19, 20] #
random_n = random.choice(n)
print("Вывожу случайное число: ", random_n)
#
for i in range(1, 10):
    n1 = i          # первое число для пары
    for j in range(1, 20):
        n2 = j    # второе число для пары
        n3 = n1 + n2
        if random_n % n3 == 0 and n1 != n2 and n1 < n2:
            result += f"{n1}{n2}"
# Преобразование через string
# Создаём пустую строку
string = ''
# По очереди добавляем к ней каждый элемент списка
for el in result:
    string += el
print("Пароль для случайного числа", random_n, ":", string)



